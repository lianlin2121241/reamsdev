<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xupt.edu.liulian.reams.mapper.CommunityMapper">
  <resultMap id="BaseResultMap" type="com.xupt.edu.liulian.reams.pojo.Community">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="avg_price" jdbcType="VARCHAR" property="avg_price" />
    <result column="build_time" jdbcType="DATE" property="build_time" />
    <result column="build_type" jdbcType="VARCHAR" property="build_type" />
    <result column="build_num" jdbcType="INTEGER" property="build_num" />
    <result column="introduce" jdbcType="VARCHAR" property="introduce" />
    <result column="surrouding" jdbcType="VARCHAR" property="surrouding" />
    <result column="key_sale" jdbcType="VARCHAR" property="key_sale" />
    <result column="greenHouse_id" jdbcType="INTEGER" property="greenHouse_id" />
    <result column="traffic" jdbcType="VARCHAR" property="traffic" />
    <result column="rentHouse_id" jdbcType="INTEGER" property="rentHouse_id" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, address, avg_price, build_time, build_type, build_num, introduce, surrouding, 
    key_sale, greenHouse_id, traffic, rentHouse_id
  </sql>
  <select id="selectByExample" parameterType="com.xupt.edu.liulian.reams.pojo.CommunityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from community
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from community
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from community
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.xupt.edu.liulian.reams.pojo.Community" useGeneratedKeys="true">
    insert into community (name, address, avg_price, 
      build_time, build_type, build_num, 
      introduce, surrouding, key_sale, 
      greenHouse_id, traffic, rentHouse_id
      )
    values (#{name,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{avg_price,jdbcType=VARCHAR}, 
      #{build_time,jdbcType=DATE}, #{build_type,jdbcType=VARCHAR}, #{build_num,jdbcType=INTEGER}, 
      #{introduce,jdbcType=VARCHAR}, #{surrouding,jdbcType=VARCHAR}, #{key_sale,jdbcType=VARCHAR}, 
      #{greenHouse_id,jdbcType=INTEGER}, #{traffic,jdbcType=VARCHAR}, #{rentHouse_id,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.xupt.edu.liulian.reams.pojo.Community" useGeneratedKeys="true">
    insert into community
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="avg_price != null">
        avg_price,
      </if>
      <if test="build_time != null">
        build_time,
      </if>
      <if test="build_type != null">
        build_type,
      </if>
      <if test="build_num != null">
        build_num,
      </if>
      <if test="introduce != null">
        introduce,
      </if>
      <if test="surrouding != null">
        surrouding,
      </if>
      <if test="key_sale != null">
        key_sale,
      </if>
      <if test="greenHouse_id != null">
        greenHouse_id,
      </if>
      <if test="traffic != null">
        traffic,
      </if>
      <if test="rentHouse_id != null">
        rentHouse_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="avg_price != null">
        #{avg_price,jdbcType=VARCHAR},
      </if>
      <if test="build_time != null">
        #{build_time,jdbcType=DATE},
      </if>
      <if test="build_type != null">
        #{build_type,jdbcType=VARCHAR},
      </if>
      <if test="build_num != null">
        #{build_num,jdbcType=INTEGER},
      </if>
      <if test="introduce != null">
        #{introduce,jdbcType=VARCHAR},
      </if>
      <if test="surrouding != null">
        #{surrouding,jdbcType=VARCHAR},
      </if>
      <if test="key_sale != null">
        #{key_sale,jdbcType=VARCHAR},
      </if>
      <if test="greenHouse_id != null">
        #{greenHouse_id,jdbcType=INTEGER},
      </if>
      <if test="traffic != null">
        #{traffic,jdbcType=VARCHAR},
      </if>
      <if test="rentHouse_id != null">
        #{rentHouse_id,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xupt.edu.liulian.reams.pojo.Community">
    update community
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="avg_price != null">
        avg_price = #{avg_price,jdbcType=VARCHAR},
      </if>
      <if test="build_time != null">
        build_time = #{build_time,jdbcType=DATE},
      </if>
      <if test="build_type != null">
        build_type = #{build_type,jdbcType=VARCHAR},
      </if>
      <if test="build_num != null">
        build_num = #{build_num,jdbcType=INTEGER},
      </if>
      <if test="introduce != null">
        introduce = #{introduce,jdbcType=VARCHAR},
      </if>
      <if test="surrouding != null">
        surrouding = #{surrouding,jdbcType=VARCHAR},
      </if>
      <if test="key_sale != null">
        key_sale = #{key_sale,jdbcType=VARCHAR},
      </if>
      <if test="greenHouse_id != null">
        greenHouse_id = #{greenHouse_id,jdbcType=INTEGER},
      </if>
      <if test="traffic != null">
        traffic = #{traffic,jdbcType=VARCHAR},
      </if>
      <if test="rentHouse_id != null">
        rentHouse_id = #{rentHouse_id,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xupt.edu.liulian.reams.pojo.Community">
    update community
    set name = #{name,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      avg_price = #{avg_price,jdbcType=VARCHAR},
      build_time = #{build_time,jdbcType=DATE},
      build_type = #{build_type,jdbcType=VARCHAR},
      build_num = #{build_num,jdbcType=INTEGER},
      introduce = #{introduce,jdbcType=VARCHAR},
      surrouding = #{surrouding,jdbcType=VARCHAR},
      key_sale = #{key_sale,jdbcType=VARCHAR},
      greenHouse_id = #{greenHouse_id,jdbcType=INTEGER},
      traffic = #{traffic,jdbcType=VARCHAR},
      rentHouse_id = #{rentHouse_id,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>