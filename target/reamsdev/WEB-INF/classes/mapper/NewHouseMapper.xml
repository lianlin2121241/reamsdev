<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xupt.edu.liulian.reams.mapper.NewHouseMapper">
  <resultMap id="BaseResultMap" type="com.xupt.edu.liulian.reams.pojo.NewHouse">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="price" jdbcType="INTEGER" property="price" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="water" jdbcType="VARCHAR" property="water" />
    <result column="fee" jdbcType="VARCHAR" property="fee" />
    <result column="heating" jdbcType="VARCHAR" property="heating" />
    <result column="electric" jdbcType="VARCHAR" property="electric" />
    <result column="housetype_id" jdbcType="INTEGER" property="housetype_id" />
    <result column="building_id" jdbcType="INTEGER" property="building_id" />
    <result column="housex" jdbcType="VARCHAR" property="housex" />
    <result column="housey" jdbcType="VARCHAR" property="housey" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, address, price, status, type, water, fee, heating, electric, housetype_id, 
    building_id, housex, housey
  </sql>
  <select id="selectByExample" parameterType="com.xupt.edu.liulian.reams.pojo.NewHouseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from newhouse
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from newhouse
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from newhouse
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.xupt.edu.liulian.reams.pojo.NewHouse" useGeneratedKeys="true">
    insert into newhouse (name, address, price, 
      status, type, water, 
      fee, heating, electric, 
      housetype_id, building_id, housex, 
      housey)
    values (#{name,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{price,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{type,jdbcType=VARCHAR}, #{water,jdbcType=VARCHAR}, 
      #{fee,jdbcType=VARCHAR}, #{heating,jdbcType=VARCHAR}, #{electric,jdbcType=VARCHAR}, 
      #{housetype_id,jdbcType=INTEGER}, #{building_id,jdbcType=INTEGER}, #{housex,jdbcType=VARCHAR}, 
      #{housey,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.xupt.edu.liulian.reams.pojo.NewHouse" useGeneratedKeys="true">
    insert into newhouse
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="water != null">
        water,
      </if>
      <if test="fee != null">
        fee,
      </if>
      <if test="heating != null">
        heating,
      </if>
      <if test="electric != null">
        electric,
      </if>
      <if test="housetype_id != null">
        housetype_id,
      </if>
      <if test="building_id != null">
        building_id,
      </if>
      <if test="housex != null">
        housex,
      </if>
      <if test="housey != null">
        housey,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="water != null">
        #{water,jdbcType=VARCHAR},
      </if>
      <if test="fee != null">
        #{fee,jdbcType=VARCHAR},
      </if>
      <if test="heating != null">
        #{heating,jdbcType=VARCHAR},
      </if>
      <if test="electric != null">
        #{electric,jdbcType=VARCHAR},
      </if>
      <if test="housetype_id != null">
        #{housetype_id,jdbcType=INTEGER},
      </if>
      <if test="building_id != null">
        #{building_id,jdbcType=INTEGER},
      </if>
      <if test="housex != null">
        #{housex,jdbcType=VARCHAR},
      </if>
      <if test="housey != null">
        #{housey,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xupt.edu.liulian.reams.pojo.NewHouse">
    update newhouse
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="water != null">
        water = #{water,jdbcType=VARCHAR},
      </if>
      <if test="fee != null">
        fee = #{fee,jdbcType=VARCHAR},
      </if>
      <if test="heating != null">
        heating = #{heating,jdbcType=VARCHAR},
      </if>
      <if test="electric != null">
        electric = #{electric,jdbcType=VARCHAR},
      </if>
      <if test="housetype_id != null">
        housetype_id = #{housetype_id,jdbcType=INTEGER},
      </if>
      <if test="building_id != null">
        building_id = #{building_id,jdbcType=INTEGER},
      </if>
      <if test="housex != null">
        housex = #{housex,jdbcType=VARCHAR},
      </if>
      <if test="housey != null">
        housey = #{housey,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xupt.edu.liulian.reams.pojo.NewHouse">
    update newhouse
    set name = #{name,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      price = #{price,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
      water = #{water,jdbcType=VARCHAR},
      fee = #{fee,jdbcType=VARCHAR},
      heating = #{heating,jdbcType=VARCHAR},
      electric = #{electric,jdbcType=VARCHAR},
      housetype_id = #{housetype_id,jdbcType=INTEGER},
      building_id = #{building_id,jdbcType=INTEGER},
      housex = #{housex,jdbcType=VARCHAR},
      housey = #{housey,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>